package controller;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.core.Controller;
import com.jfinal.kit.JsonKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import model.ssk.XcDatasource;
import model.ssk.XcIndex;
import model.ssk.XcInterface;
import util.JsonUtil;
import util.MsgUtil;
import util.node.InfiniteLevelTreeUtil;
import util.node.Node;

import java.util.ArrayList;
import java.util.List;

//指标配置
public class IndexController extends Controller {
    public void s(){

    }
    public void editIndex(){
        int id=getParaToInt("id");
        XcIndex xc=XcIndex.dao.findById(id);
        List<XcIndex> xc1=XcIndex.getOneXcIndex(xc.getType());
        List<XcIndex> xc2=XcIndex.getCxcBypid(xc.getPid());
        List<XcIndex> xc3 = XcIndex.getCxcBycid(xc.getCid());
        List<Node> nodeList=new ArrayList<>();

        for(XcIndex arr:xc1){
            nodeList.add(Node.getNode(arr));

        }
        for(XcIndex arr:xc2){
            nodeList.add(Node.getNode(arr));

        }
        for(XcIndex arr:xc3){
            nodeList.add(Node.getNode(arr));

        }
        nodeList.add(Node.getNode(xc));


        if(xc.getIslast()) {
            List<Node> list=InfiniteLevelTreeUtil.getInfiniteLevelTree(nodeList);
            renderJson(MsgUtil.successMsg(list));
        }else{

            List<XcIndex> xc4 = XcIndex.getCxcBycid(xc3.get(0).getCid());
            for(XcIndex arr:xc4){
                nodeList.add(Node.getNode(arr));

            }
            List<Node> list=InfiniteLevelTreeUtil.getInfiniteLevelTree(nodeList);
            renderJson(MsgUtil.successMsg(list));

        }


    }
    public void updateOrSaveDatasource(){
        JSONObject json=JsonUtil.getJSONObject(getRequest());
        XcDatasource xc=json.toJavaObject(XcDatasource.class);

        if(json.getString("method").equals("update")){
           renderJson(MsgUtil.successMsg(xc.update()));
        }else {
            renderJson(MsgUtil.successMsg(xc.save()));
        }

    }
    public void selectDatasourceById(){
        renderJson(MsgUtil.successMsg(XcDatasource.dao.
                findFirst("select id,type,name,oldName,ename,busnum," +
                        "remarks,DATE_FORMAT(accessTime,\"%Y-%m-%d\") accessTime," +
                        "typenum,colnum from xc_datasource where id=?",getPara("id"))));

    }

    public void selectIndexOrDatasource(){
            int type=getParaToInt("type");
            String name=getPara("name");

            if(name.equals("index")){
                List<XcIndex> xc=XcIndex.getXcByType(type);
                List<Node> nodeList=new ArrayList<>();
                for(XcIndex arr:xc){
                    nodeList.add(Node.getNode(arr));
                }
                List<Node> list=InfiniteLevelTreeUtil.getInfiniteLevelTree(nodeList);
                renderJson(MsgUtil.successMsg(list));
               /* Page<Record> page=Db.paginate(pageNumber,pageSize,"SELECT a.id,a.name,b.name " +
                        "oneName"," FROM xc_index a,xc_index b where a.type=? and a.level=2 and a.pid=b.cid",type);
                renderJson(MsgUtil.successMsg(page));*/

            }else{
                int pageNumber=getParaToInt("pageNumber");
                int pageSize=getParaToInt("pageSize");
                Page<Record> page=Db.paginate(pageNumber,pageSize,"select id,type,name,oldName," +
                        "ename,busnum,remarks,DATE_FORMAT(accessTime,\"%Y-%m-%d\") accessTime,typenum,colnum"," from xc_datasource where type=?",type);
                renderJson(MsgUtil.successMsg(page));
            }


    }
    public void selectDatasource(){
            int type=getParaToInt("type");
            int pageNumber=getParaToInt("pageNumber");
            int pageSize=getParaToInt("pageSize");
            Page<Record> page=Db.paginate(pageNumber,pageSize,"select id,type,name,oldName," +
                    "ename,busnum,remarks,accessTime,typenum,colnum"," from xc_datasource where type=?",type);
           renderJson(MsgUtil.successMsg(page));

    }


    public void table() {
        List<XcIndex> list=XcIndex.getXC(2);
        for(XcIndex xc:list){
           Record record= Db.findFirst("SELECT TABLE_NAME,TABLE_COMMENT FROM information_schema.TABLES WHERE " +
                    "table_schema='hz_xc_sssj' and TABLE_COMMENT " +
                    "like '%企业%' and TABLE_COMMENT like '%"+xc.getName()+"%'");
           if(record!=null){
               xc.setEname(record.getStr("TABLE_NAME")).setRemarks(record.getStr("TABLE_COMMENT")).update();

           }

        }
        renderJson(MsgUtil.successMsg("同步企业表英文名成功"));
    }
    public void column() {
        List<XcIndex> list=XcIndex.getXC(2);
        for(XcIndex xc:list){

           List<Record> record= Db.find("SELECT COLUMN_NAME,column_comment FROM INFORMATION_SCHEMA.Columns " +
                   "WHERE table_name=? AND table_schema='hz_xc_sssj'",xc.getEname());
           if(record!=null){
               //xc.setEname(record.getStr("TABLE_NAME")).setRemarks(record.getStr("TABLE_COMMENT")).update();
               for (int i = 0; i <record.size() ; i++) {
                   XcIndex.saveXc(xc.getCid(),record.get(i).getStr("column_comment"),record.get(i).getStr("COLUMN_NAME"));
               }
           }

        }
        renderJson(MsgUtil.successMsg("同步企业表字段成功"));
    }
}
